apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'mongo'
apply plugin: 'groovy'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

group = 'com.emak.oauth2.provider'
version = '1.0.SNAPSHOT'

buildscript {

    repositories {
        mavenCentral()
        jcenter()

    }

    dependencies {

        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0'
        classpath 'com.sourcemuse.gradle.plugin:gradle-mongo-plugin:0.1.0'

    }
}

configurations {
    emma
}


ext {
    springFrameworkVersion = "4.0.5.RELEASE"
    springDataVersion = "1.6.1.RELEASE"
    springDataMongoDBVersion = "1.5.1.RELEASE"
    springSecurityOauth2Version = "2.0.3.RELEASE"
    springIntegrationVersion = "4.0.2.RELEASE"
    tomcatVersion = '7.0.11'
    springSecurityVersion = "3.2.4.RELEASE"
    jerseyVersion = "2.11"
    jacksonVersion = "1.9.13"

}


repositories {
    mavenCentral()
}


dependencies {

    providedCompile "javax.servlet:servlet-api:2.5"
    compile "org.springframework:spring-beans:${springFrameworkVersion}"
    compile "org.springframework:spring-core:${springFrameworkVersion}"
    compile "org.springframework:spring-context:${springFrameworkVersion}"
    compile "org.springframework:spring-webmvc:${springFrameworkVersion}"
    compile "org.springframework:spring-web:${springFrameworkVersion}"
    compile "org.springframework.security.oauth:spring-security-oauth2:${springSecurityOauth2Version}"
    compile "org.springframework.security:spring-security-core:${springSecurityVersion}"
    compile "org.springframework.data:spring-data-jpa:${springDataVersion}"
    compile "org.springframework.data:spring-data-mongodb:${springDataMongoDBVersion}"
    compile "org.springframework.integration:spring-integration-core:${springIntegrationVersion}"
    compile "org.springframework.integration:spring-integration-mail:${springIntegrationVersion}"
    compile "org.hibernate:hibernate-validator:5.1.0.Final"
    compile "javax.el:javax.el-api:2.2.5"
    compile "org.glassfish.web:javax.el:2.2.5"
    compile "javax.mail:mail:1.4.3"
    compile "org.apache.velocity:velocity:1.7"
    compile "joda-time:joda-time:2.3"
    compile "com.google.code.gson:gson:1.7.2"

    compile ("org.glassfish.jersey.ext:jersey-spring3:${jerseyVersion}") {
        exclude group: "org.springframework", module: "spring-core"
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-beans"
    }

    compile "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"
    compile "org.glassfish.jersey.core:jersey-common:${jerseyVersion}"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"

    compile "org.codehaus.jackson:jackson-core-asl:$jacksonVersion"
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
    compile "org.codehaus.jackson:jackson-xc:$jacksonVersion"

    compile "org.slf4j:slf4j-api:1.7.5"
    runtime "ch.qos.logback:logback-classic:1.0.13"
    compile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.41"
    testCompile "org.springframework:spring-test:${springFrameworkVersion}"
    testCompile "junit:junit:4.11"
    testCompile "org.hamcrest:hamcrest-all:1.1"
    testCompile "org.mockito:mockito-all:1.9.0"

    testCompile "org.springframework:spring-test:$springFrameworkVersion",
            "org.glassfish.grizzly:grizzly-http:2.1.2",
            "org.glassfish.gmbal:gmbal-api-only:3.0.0-b023",
            "org.glassfish.external:management-api:3.0.0-b012",
            "org.glassfish.grizzly:grizzly-http-server:2.1.2",
            "org.glassfish.grizzly:grizzly-rcm:2.1.2",
            "org.glassfish.grizzly:grizzly-http-servlet:2.1.2",
            "org.glassfish:javax.servlet:3.1",
            "org.glassfish.jersey.core:jersey-client:$jerseyVersion",
    testCompile("org.codehaus.groovy.modules.http-builder:http-builder:0.5.2") {
        exclude group: 'org.codehaus.groovy'
    }

//    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
//            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
//    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
//        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
//    }

    testCompile "org.codehaus.groovy:groovy-all:2.0.0"

    emma "emma:emma:2.1.5320"
    emma "emma:emma_ant:2.1.5320"


    test {
        exclude("**/*IntegrationTest*")
        exclude("**/*Tst*")
//        jvmArgs "-XX:-UseSplitVerifier", "-Demma.coverage.out.file=$buildDir/tmp/emma/metadata.emma", "-Demma.coverage.out.merge=true"
//
//        doFirst {
//            println "Instrumenting the classes at " + sourceSets.main.output.classesDir.absolutePath
//            // define the custom EMMA ant tasks
//            ant.taskdef(resource: "emma_ant.properties", classpath: configurations.emma.asPath)
//
//            ant.path(id: "run.classpath") {
//                pathelement(location: sourceSets.main.output.classesDir.absolutePath)
//            }
//            def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma/instr")
//            emmaInstDir.mkdirs()
//            println "Creating $emmaInstDir to instrument from " + sourceSets.main.output.classesDir.absolutePath
//            // instruct our compiled classes and store them at $buildDir/tmp/emma/instr
//            ant.emma(enabled: 'true', verbosity: 'trace1') {
//                instr(merge: "true", destdir: emmaInstDir.absolutePath, instrpathref: "run.classpath",
//                        metadatafile: new File(emmaInstDir, '/metadata.emma').absolutePath) {
//                    instrpath {
//                        fileset(dir: sourceSets.main.output.classesDir.absolutePath, includes: "**/*.class")
//                    }
//                }
//            }
//            setClasspath(files("$buildDir/tmp/emma/instr") + configurations.emma + getClasspath())
//        }
//
//        doLast {
//            def srcDir = sourceSets.main.java.srcDirs.toArray()[0]
//            println "Creating test coverage reports for classes " + srcDir
//            def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma")
//            ant.emma(enabled: "true", verbosity: 'trace1') {
//                new File("$buildDir/reports/emma").mkdirs()
//                report(sourcepath: srcDir) {
//                    fileset(dir: emmaInstDir.absolutePath) {
//                        include(name: "**/*.emma")
//                    }
//                    txt(outfile: "$buildDir/reports/emma/coverage.txt")
//                    html(outfile: "$buildDir/reports/emma/coverage.html")
//                    xml(outfile: "$buildDir/reports/emma/coverage.xml")
//                }
//            }
//            println "Test coverage reports available at $buildDir/reports/emma."
//            println "txt: $buildDir/reports/emma/coverage.txt"
//            println "Test $buildDir/reports/emma/coverage.html"
//            println "Test $buildDir/reports/emma/coverage.xml"
//        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.1'
    }


    task integrationTest(type: Test) {
        include '**/*IntegrationTest*.*'
        dependsOn startManagedMongoDb

    }


}